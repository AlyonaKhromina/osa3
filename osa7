#include <iostream>

using namespace std;

struct item { 
	int data;
	item* next;
	item* prev;
};

class queue {
private:
	item* first; 
	item* last; 
	int count; 
public:
	queue()
	{
		last = NULL;
		first = NULL;
		count = 0;
	}
	void add(int a) 
	{
		item* newitem = new item;
		newitem->data = a;
		if (first == NULL)
			first = newitem;
		newitem->next = NULL;
		newitem->prev = last;
		if (last != NULL)
			last->next = newitem;
		last = newitem;
		count++;
	}
	void del_first() 
	{
		item* place = first;
		if (place != last) 
		{
			place->next->prev = NULL;
			first = place->next;
		}
		else
		{
		first = NULL;
		last = NULL;
		}
		delete place;
		count--;
	}
	bool empty() 
	{
		bool empt;
		if (first == NULL)
			empt = true;
		else
			empt = false;
		return empt;
	}
	int first_data()
	{
		return first->data;
	}
};

class Graph {
	int** matrix;
	bool* visited;
	int* ways;
	int start, end;
	int size;

public:
	Graph(int N, int start, int end) {
		
		matrix = new int*[N];
		for (int j = 0; j < N; j++) {
			int* temp = new int[N];
			for (int i = 0; i < N; i++) {
				temp[i] = 0;
			}
			matrix[j] = temp;
		}
		size = N;

		visited = new bool[N];
		for (int o = 0; o < N; o++) {
			visited[o] = 0;
		}
		ways = new int[N];
		for (int u = 0; u < N; u++) {
			ways[u] = 0;
		}

		this->start = start;
		this->end = end;
	}

	void add_edge(int from, int to) {
		matrix[from][to] = 1;
	}

	int* find_ways() {
		queue Que;
		Que.add(start);
		visited[start] = 1;
		ways[start] = -1;
		while (!Que.empty())
		{
			int unit = Que.first_data();
			Que.del_first();
			for (int i = 0; i < size; i++)
			{
				if ((visited[i] == 0) && (matrix[unit][i] == 1))
				{
					Que.add(i);
					ways[i] = unit;
					visited[i] = 1;
				}
			}
		}
		int dne = end;
		int count = 0;
		do {
			count++;
			dne = ways[dne];
		} while (dne != ways[start]);
		int* rev = new int[count + 1];
		rev[0] = count;
		int i = 0;
		rev[i + 1] = end;
		i++;
		do {
			rev[i + 1] = ways[end];
			i++;
			end = ways[end];
		} while (end != start);
		return rev;
	}

	void test() {
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				cout << "  " << matrix[i][j] << "  ";
			}
			cout << endl;
		}
	}
};

void print(int* arr) {
	for (int i = arr[0]; i > 0; i--) {
		cout << arr[i] << " ";
	}
	cout << endl << endl;
}

int main(int count, char** params)
{

	setlocale(LC_ALL, "");

	Graph g(atoi(params[1]), atoi(params[2]), atoi(params[3]));

	int counter = 4;
	while (counter <= count - 1) {
		if (string(params[counter]) == "add") {
			g.add_edge(atoi(params[counter + 1]), atoi(params[counter + 2]));
			counter += 3;
		}
	}
	g.test();
	print(g.find_ways());

	//Graph g(5, 0, 4);
	//g.add_edge(0, 1);
	//g.add_edge(1, 2);
	//g.add_edge(2, 3);]
	//g.add_edge(3, 4);
	//g.test();
	//g.BFS();
	
	system("pause");
	return 0;
}
